#, ifelse (est$pval<0.001, '<0.001', round(est$pval, 3))
)
)
colnames(yay) <- c('Intervention (95%CI)', 'Control (95%CI)', 'Effect(95%CI)') #, 'pvalue')
yay
}
yay.cont <- data.frame(rbind(make.pretty.app(unadj), make.pretty.app(fixed),
make.pretty.app(small_tmle),
make.pretty.app(large_tmle),
make.pretty.app(large_tmle_Qonly)))
# variance comparison
precision <-  round(c( 1,
(unadj$se^2)/(fixed$se^2),
(unadj$se^2)/(small_tmle$se^2),
(unadj$se^2)/(large_tmle$se^2),
(unadj$se^2)/(large_tmle_Qonly$se^2) ),2)
yay.cont <- cbind(yay.cont, precision)
row.names(yay.cont) <- c('Unadjusted','Static', 'Small APS', 'Large APS', 'Large outcome reg')
kable(yay.cont, caption='Comparative results with a continous outcome')
make.pretty.app <- function(est, scaler=1, digit=1, in.percent=F){
make.pretty.mini <- function(pt, lo, hi, scaler, digit, in.percent){
paste0( round(pt*scaler, digit), ifelse(in.percent,'%',''),
' (', #' (95%CI: ',
round(lo*scaler, digit), ', ',
round(hi*scaler, digit), ifelse(in.percent,'%',''), ')'
)
}
yay <- data.frame( cbind(
make.pretty.mini(est$Txt.est, est$Txt.CI.lo, est$Txt.CI.hi,
scaler=scaler, digit=digit, in.percent=in.percent),
make.pretty.mini(est$Con.est, est$Con.CI.lo, est$Con.CI.hi,
scaler=scaler, digit=digit, in.percent=in.percent),
make.pretty.mini(est$est, est$CI.lo, est$CI.hi,
scaler=scaler, digit=digit, in.percent=in.percent)
#, ifelse (est$pval<0.001, '<0.001', round(est$pval, 3))
)
)
colnames(yay) <- c('Intervention \(95%CI\)', 'Control (95%CI)', 'Effect(95%CI)') #, 'pvalue')
yay.cont <- data.frame(rbind(make.pretty.app(unadj), make.pretty.app(fixed),
make.pretty.app(small_tmle),
make.pretty.app(large_tmle),
make.pretty.app(large_tmle_Qonly)))
# variance comparison
precision <-  round(c( 1,
(unadj$se^2)/(fixed$se^2),
(unadj$se^2)/(small_tmle$se^2),
(unadj$se^2)/(large_tmle$se^2),
(unadj$se^2)/(large_tmle_Qonly$se^2) ),2)
yay.cont <- cbind(yay.cont, precision)
row.names(yay.cont) <- c('Unadjusted','Static', 'Small APS', 'Large APS', 'Large outcome reg')
kable(yay.cont, caption='Comparative results with a **continous outcome**; 95%CI shown in (); precision is the variance estimate for unadjusted approach divided by the variance of another approach')
set.seed(1)
data_input$Y <- as.numeric(data_input$cd420 > 350)
goal <- 'aRR'
unadj <- Stage2(goal = goal, data.input = data_input, do.data.adapt =F)
small_tmle <- Stage2(goal = goal, data.input = data_input,
do.data.adapt = TRUE, V = 5,
cand.QAdj =  small_aps$cand.QAdj, cand.Qform = small_aps$cand.Qform,
cand.gAdj =  small_aps$cand.gAdj, cand.gform = small_aps$cand.gform)
small_tmle
# selection for outcome regression
small_aps$cand.QAdj[small_tmle$QAdj]
# selection for pscore
small_aps$cand.gAdj[small_tmle$gAdj]
large_tmle <- Stage2(goal = goal, data.input = data_input,
do.data.adapt = TRUE, V = 5,
cand.QAdj =  large_aps$cand.QAdj, cand.Qform = large_aps$cand.Qform,
cand.gAdj =  large_aps$cand.gAdj, cand.gform = large_aps$cand.gform)
large_tmle
# selection for outcome regression
large_aps$cand.QAdj[large_tmle$QAdj]
# selection for pscore
large_aps$cand.gAdj[large_tmle$gAdj]
set.seed(1)
data_input$Y <- as.numeric(data_input$cd420 > 350)
goal <- 'aRR'
# unadjusted
unadj <- Stage2(goal = goal, data.input = data_input, do.data.adapt =F)
# fixed adjustment
fixed <- Stage2(goal = goal, data.input = data_input,
do.data.adapt = F,
QAdj='age', Qform='glm',
gAdj='gender', gform='glm')
# TMLE with small APS
small_tmle <- Stage2(goal = goal, data.input = data_input,
do.data.adapt = TRUE, V = 5,
cand.QAdj =  small_aps$cand.QAdj, cand.Qform = small_aps$cand.Qform,
cand.gAdj =  small_aps$cand.gAdj, cand.gform = small_aps$cand.gform)
small_tmle
# selection for outcome regression
#small_aps$cand.QAdj[small_tmle$QAdj]
# selection for pscore
#small_aps$cand.gAdj[small_tmle$gAdj]
# TMLE with large APS
large_tmle <- Stage2(goal = goal, data.input = data_input,
do.data.adapt = TRUE, V = 5,
cand.QAdj =  large_aps$cand.QAdj, cand.Qform = large_aps$cand.Qform,
cand.gAdj =  large_aps$cand.gAdj, cand.gform = large_aps$cand.gform)
large_tmle
# selection for outcome regression
#large_aps$cand.QAdj[large_tmle$QAdj]
# selection for pscore
#large_aps$cand.gAdj[large_tmle$gAdj]
# TMLE adjusting in outcome regression with large APS selection and unadjusted pscore
large_tmle_Qonly <- Stage2(goal = goal, data.input = data_input,
# do.data.adapt = F, V = 5,
QAdj= all_cand, Qform='mars',
gAdj=NULL, gform='glm')
large_tmle_Qonly
large_tmle
large_aps$cand.QAdj[large_tmle$QAdj]
# TMLE adjusting in outcome regression with large APS selection and unadjusted pscore
large_tmle_Qonly <- Stage2(goal = goal, data.input = data_input,
# do.data.adapt = F, V = 5,
QAdj= large_aps$cand.QAdj[large_tmle$QAdj],
Qform=large_tmle$Qform,
gAdj=NULL, gform='glm')
# TMLE adjusting in outcome regression with large APS selection and unadjusted pscore
large_tmle_Qonly <- Stage2(goal = goal, data.input = data_input,
# do.data.adapt = F, V = 5,
QAdj= unlist(large_aps$cand.QAdj[large_tmle$QAdj]),
Qform=large_tmle$Qform,
gAdj=NULL, gform='glm')
large_tmle_Qonly
yay.bin <- data.frame(rbind(make.pretty.app(unadj), make.pretty.app(fixed),
make.pretty.app(small_tmle),
make.pretty.app(large_tmle),
make.pretty.app(large_tmle_Qonly)))
# variance comparison
precision <-  round(c( 1,
(unadj$se^2)/(fixed$se^2),
(unadj$se^2)/(small_tmle$se^2),
(unadj$se^2)/(large_tmle$se^2),
(unadj$se^2)/(large_tmle_Qonly$se^2) ),2)
yay.bin <- cbind(yay.bin, precision)
row.names(yay.bin) <- c('Unadjusted','Static', 'Small APS', 'Large APS', 'Large outcome reg')
kable(yay.bin, caption='Comparative results with a **binary outcome**; 95%CI shown in (); precision is the variance estimate for unadjusted approach divided by the variance of another approach')
yay.bin <- data.frame(rbind(make.pretty.app(unadj, scaler=100, in.percent=T),
make.pretty.app(fixed, scaler=100, in.percent=T),
make.pretty.app(small_tmle, scaler=100, in.percent=T),
make.pretty.app(large_tmle, scaler=100, in.percent=T),
make.pretty.app(large_tmle_Qonly, scaler=100, in.percent=T)))
# variance comparison
precision <-  round(c( 1,
(unadj$se^2)/(fixed$se^2),
(unadj$se^2)/(small_tmle$se^2),
(unadj$se^2)/(large_tmle$se^2),
(unadj$se^2)/(large_tmle_Qonly$se^2) ),2)
yay.bin <- cbind(yay.bin, precision)
row.names(yay.bin) <- c('Unadjusted','Static', 'Small APS', 'Large APS', 'Large outcome reg')
kable(yay.bin, caption='Comparative results with a **binary outcome**; 95%CI shown in (); precision is the variance estimate for unadjusted approach divided by the variance of another approach')
make.pretty.app <- function(est, scaler=1, digit=1, in.percent=F){
make.pretty.mini <- function(pt, lo, hi, scaler, digit, in.percent){
paste0( round(pt*scaler, digit), ifelse(in.percent,'%',''),
' (', #' (95%CI: ',
round(lo*scaler, digit), ', ',
round(hi*scaler, digit), ifelse(in.percent,'%',''), ')'
)
}
yay <- data.frame( cbind(
make.pretty.mini(est$Txt.est, est$Txt.CI.lo, est$Txt.CI.hi,
scaler=scaler, digit=digit, in.percent=in.percent),
make.pretty.mini(est$Con.est, est$Con.CI.lo, est$Con.CI.hi,
scaler=scaler, digit=digit, in.percent=in.percent),
make.pretty.mini(est$est, est$CI.lo, est$CI.hi,
scaler=1, digit=digit, in.percent=F)
#, ifelse (est$pval<0.001, '<0.001', round(est$pval, 3))
)
)
colnames(yay) <- c('Intervention', 'Control', 'Effect') #, 'pvalue')
yay
}
yay.bin <- data.frame(rbind(make.pretty.app(unadj, scaler=100, in.percent=T),
make.pretty.app(fixed, scaler=100, in.percent=T),
make.pretty.app(small_tmle, scaler=100, in.percent=T),
make.pretty.app(large_tmle, scaler=100, in.percent=T),
make.pretty.app(large_tmle_Qonly, scaler=100, in.percent=T)))
# variance comparison
precision <-  round(c( 1,
(unadj$se^2)/(fixed$se^2),
(unadj$se^2)/(small_tmle$se^2),
(unadj$se^2)/(large_tmle$se^2),
(unadj$se^2)/(large_tmle_Qonly$se^2) ),2)
yay.bin <- cbind(yay.bin, precision)
row.names(yay.bin) <- c('Unadjusted','Static', 'Small APS', 'Large APS', 'Large outcome reg')
kable(yay.bin, caption='Comparative results with a **binary outcome**; 95%CI shown in (); precision is the variance estimate for unadjusted approach divided by the variance of another approach')
make.pretty.app <- function(est, scaler=1, digit=1, in.percent=F){
make.pretty.mini <- function(pt, lo, hi, scaler, digit, in.percent){
paste0( round(pt*scaler, digit), ifelse(in.percent,'%',''),
' (', #' (95%CI: ',
round(lo*scaler, digit), ', ',
round(hi*scaler, digit), ifelse(in.percent,'%',''), ')'
)
}
yay <- data.frame( cbind(
make.pretty.mini(est$Txt.est, est$Txt.CI.lo, est$Txt.CI.hi,
scaler=scaler, digit=digit, in.percent=in.percent),
make.pretty.mini(est$Con.est, est$Con.CI.lo, est$Con.CI.hi,
scaler=scaler, digit=digit, in.percent=in.percent),
make.pretty.mini(est$est, est$CI.lo, est$CI.hi,
scaler=1, digit=ifelse(in.percent, (digit+1), digit), in.percent=F)
#, ifelse (est$pval<0.001, '<0.001', round(est$pval, 3))
)
)
colnames(yay) <- c('Intervention', 'Control', 'Effect') #, 'pvalue')
yay
}
yay.bin <- data.frame(rbind(make.pretty.app(unadj, scaler=100, in.percent=T),
make.pretty.app(fixed, scaler=100, in.percent=T),
make.pretty.app(small_tmle, scaler=100, in.percent=T),
make.pretty.app(large_tmle, scaler=100, in.percent=T),
make.pretty.app(large_tmle_Qonly, scaler=100, in.percent=T)))
# variance comparison
precision <-  round(c( 1,
(unadj$se^2)/(fixed$se^2),
(unadj$se^2)/(small_tmle$se^2),
(unadj$se^2)/(large_tmle$se^2),
(unadj$se^2)/(large_tmle_Qonly$se^2) ),2)
yay.bin <- cbind(yay.bin, precision)
row.names(yay.bin) <- c('Unadjusted','Static', 'Small APS', 'Large APS', 'Large outcome reg')
kable(yay.bin, caption='Comparative results with a **binary outcome**; 95%CI shown in (); precision is the variance estimate for unadjusted approach divided by the variance of another approach')
unadj
cont <- data.frame(rbind(unadj, fixed, small_tmle, large_tmle, large_tmle_Qonly))
cont
est=cont
these.rows=c('Unadjusted','Static', 'Small APS',
'Large APS', 'Large outcome reg')
make.pretty.mini <- function(pt, lo, hi, scaler, digit, in.percent){
paste0( round(pt*scaler, digit), ifelse(in.percent,'%',''),
' (', #' (95%CI: ',
round(lo*scaler, digit), '-',
round(hi*scaler, digit), ifelse(in.percent,'%',''), ')'
)
}
make.pretty.app <- function(est, scaler=1, digit=1, in.percent=F){
yay <- data.frame( cbind(
make.pretty.mini(est$Txt.est, est$Txt.CI.lo, est$Txt.CI.hi,
scaler=scaler, digit=digit, in.percent=in.percent),
make.pretty.mini(est$Con.est, est$Con.CI.lo, est$Con.CI.hi,
scaler=scaler, digit=digit, in.percent=in.percent),
make.pretty.mini(est$est, est$CI.lo, est$CI.hi,
scaler=1, digit=ifelse(in.percent, (digit+1), digit), in.percent=F),
#ifelse (est$pval<0.001, '<0.001', round(est$pval, 3))
round( var.base/(est$se^2), 2)
)
)
colnames(yay) <- c('Intervention', 'Control', 'Effect', 'Precision')
yay
}
var.base
var.base = (unadj$se^2)
est
make.pretty.app(est[k,], scaler=scaler, digit=digit, in.percent = in.percent,
var.base=var.base)
make.pretty.app <- function(est, scaler=1, digit=1, in.percent=F, var.base){
yay <- data.frame( cbind(
make.pretty.mini(est$Txt.est, est$Txt.CI.lo, est$Txt.CI.hi,
scaler=scaler, digit=digit, in.percent=in.percent),
make.pretty.mini(est$Con.est, est$Con.CI.lo, est$Con.CI.hi,
scaler=scaler, digit=digit, in.percent=in.percent),
make.pretty.mini(est$est, est$CI.lo, est$CI.hi,
scaler=1, digit=ifelse(in.percent, (digit+1), digit), in.percent=F),
#ifelse (est$pval<0.001, '<0.001', round(est$pval, 3))
round( var.base/(est$se^2), 2)
)
)
colnames(yay) <- c('Intervention', 'Control', 'Effect', 'Precision')
yay
}
make.pretty.app(est[k,], scaler=scaler, digit=digit, in.percent = in.percent,
var.base=var.base)
k=1
make.pretty.app(est[k,], scaler=scaler, digit=digit, in.percent = in.percent,
var.base=var.base)
in.percent=F
scaler
digit
make.pretty.app(est[k,], scaler=scaler, digit=digit, in.percent = in.percent,
var.base=var.base)
cont <- data.frame(rbind(unadj, fixed, small_tmle, large_tmle, large_tmle_Qonly))
yay.cont <- make.pretty.wrapper(est=cont,
# variance estimate for precision comparison
var.base = (unadj$se^2),
these.rows=c('Unadjusted','Static', 'Small APS',
'Large APS', 'Large outcome reg')
)
source("~/Dropbox/Research/ClusteredTMLEs/BigRCTs/AdaptivePrespec/MakePretty_App.R")
cont <- data.frame(rbind(unadj, fixed, small_tmle, large_tmle, large_tmle_Qonly))
yay.cont <- make.pretty.wrapper(est=cont,
# variance estimate for precision comparison
var.base = (unadj$se^2),
these.rows=c('Unadjusted','Static', 'Small APS',
'Large APS', 'Large outcome reg')
)
kable(yay.cont, caption='Comparative results with a **continous outcome**; 95%CI shown in (); precision is the variance estimate for unadjusted approach divided by the variance of another approach')
bin <- data.frame(rbind(unadj, fixed, small_tmle, large_tmle, large_tmle_Qonly))
yay.bin <- make.pretty.wrapper(est=bin,
# variance estimate for precision comparison
var.base = (unadj$se^2),
these.rows=c('Unadjusted','Static', 'Small APS',
'Large APS', 'Large outcome reg')
)
kable(yay.bin, caption='Comparative results with a **binary outcome**; 95%CI shown in (); precision is the variance estimate for unadjusted approach divided by the variance of another approach')
bin <- data.frame(rbind(unadj, fixed, small_tmle, large_tmle, large_tmle_Qonly))
yay.bin <- make.pretty.wrapper(est=bin,
# variance estimate for precision comparison
var.base = (unadj$se^2),
these.rows=c('Unadjusted','Static', 'Small APS',
'Large APS', 'APS outcome only'),
scaler=100, in.percent=T
)
kable(yay.bin, caption='Comparative results with a **binary outcome**; 95%CI shown in (); precision is the variance estimate for unadjusted approach divided by the variance of another approach')
unadj
unadj
fixed
# unadjusted
unadj <- Stage2(goal = goal, data.input = data_input, do.data.adapt =F)
# fixed adjustment
fixed <- Stage2(goal = goal, data.input = data_input,
do.data.adapt = F,
QAdj='gender', Qform='glm',
gAdj='age', gform='glm')
# TMLE with small APS
small_tmle <- Stage2(goal = goal, data.input = data_input,
do.data.adapt = TRUE, V = 5,
cand.QAdj =  small_aps$cand.QAdj, cand.Qform = small_aps$cand.Qform,
cand.gAdj =  small_aps$cand.gAdj, cand.gform = small_aps$cand.gform)
small_tmle
# selection for outcome regression
small_aps$cand.QAdj[small_tmle$QAdj]
# selection for pscore
small_aps$cand.gAdj[small_tmle$gAdj]
# TMLE with large APS
large_tmle <- Stage2(goal = goal, data.input = data_input,
do.data.adapt = TRUE, V = 5,
cand.QAdj =  large_aps$cand.QAdj, cand.Qform = large_aps$cand.Qform,
cand.gAdj =  large_aps$cand.gAdj, cand.gform = large_aps$cand.gform)
large_tmle
# selection for outcome regression
#large_aps$cand.QAdj[large_tmle$QAdj]
# selection for pscore
large_aps$cand.gAdj[large_tmle$gAdj]
# TMLE adjusting in outcome regression with large APS selection and unadjusted pscore
large_tmle_Qonly <- Stage2(goal = goal, data.input = data_input,
# do.data.adapt = F, V = 5,
QAdj= unlist(large_aps$cand.QAdj[large_tmle$QAdj]),
Qform=large_tmle$Qform,
gAdj=NULL, gform='glm')
large_tmle_Qonly
bin <- data.frame(rbind(unadj, fixed, small_tmle, large_tmle, large_tmle_Qonly))
yay.bin <- make.pretty.wrapper(est=bin,
# variance estimate for precision comparison
var.base = (unadj$se^2),
these.rows=c('Unadjusted','Static', 'Small APS',
'Large APS', 'APS outcome only'),
scaler=100, in.percent=T
)
kable(yay.bin, caption='Comparative results with a **binary outcome**; 95%CI shown in (); precision is the variance estimate for unadjusted approach divided by the variance of another approach')
fixed
unadj
library("speff2trial")
# help(ACTG175)
data_input <- ACTG175
# subset the data  aged 18+
data_input <- data_input[data_input$age >17,]
# create indicators
data_input$young <- as.numeric( data_input$age < 30)
data_input$cd40bin <- as.numeric(data_input$cd40 > 350)
data_input$cd80bin <- as.numeric(data_input$cd80 > 350)
data_input$recent <- as.numeric(data_input$strat==2)
data_input$id  <- data_input$pidnum # patient id
data_input$U   <- 1
data_input$alpha <- 1
data_input$A   <- data_input$treat
set.seed(1)
nReps <- 5000
sim.cols <- c('est', 'bias', 'cover','reject')
UNADJ <-  data.frame(matrix(NA, nrow=nReps, ncol=length(sim.cols)))
colnames(UNADJ) <- sim.cols
SMALL <- BIG <- UNADJ
data_input$Y   <- data_input$cd420
goal <- 'RD'
dt <- data_input
# randomly permute the treatment
dt$A <- sample(dt$A)
# implement 3 estimators
unadj <- suppressWarnings( Stage2(goal = goal, data.input = dt, do.data.adapt =F, psi=0))
small_tmle <- suppressWarnings( Stage2(goal = goal, data.input = dt,
do.data.adapt = TRUE, V = 5,
cand.QAdj =  small_aps$cand.QAdj, cand.Qform = small_aps$cand.Qform,
cand.gAdj =  small_aps$cand.gAdj, cand.gform = small_aps$cand.gform,
psi=0) )
large_tmle <- suppressWarnings( Stage2(goal = goal, data.input = dt,
do.data.adapt = TRUE, V = 5,
cand.QAdj =  large_aps$cand.QAdj, cand.Qform = large_aps$cand.Qform,
cand.gAdj =  large_aps$cand.gAdj, cand.gform = large_aps$cand.gform,
psi=0) )
rm(list=ls())
library("speff2trial")
# help(ACTG175)
data_input <- ACTG175
# subset the data  aged 18+
data_input <- data_input[data_input$age >17,]
# create indicators
data_input$young <- as.numeric( data_input$age < 30)
data_input$cd40bin <- as.numeric(data_input$cd40 > 350)
data_input$cd80bin <- as.numeric(data_input$cd80 > 350)
data_input$recent <- as.numeric(data_input$strat==2)
data_input$id  <- data_input$pidnum # patient id
data_input$U   <- 1
data_input$alpha <- 1
data_input$A   <- data_input$treat
small_aps <- get.cand.adj(all.cand = all_cand, cand.Qform.fancy = NULL, cand.gform.fancy = NULL)
rm(list=ls())
source("Stage2_Functions_Meta.R")
source("TMLE_Functions_Meta.R")
source("Adapt_Functions_Meta.R")
library("SuperLearner")
library("glmnet")
library("earth")
library('knitr')
library("speff2trial")
# help(ACTG175)
data_input <- ACTG175
# subset the data  aged 18+
data_input <- data_input[data_input$age >17,]
# create indicators
data_input$young <- as.numeric( data_input$age < 30)
data_input$cd40bin <- as.numeric(data_input$cd40 > 350)
data_input$cd80bin <- as.numeric(data_input$cd80 > 350)
data_input$recent <- as.numeric(data_input$strat==2)
data_input$id  <- data_input$pidnum # patient id
data_input$U   <- 1
data_input$alpha <- 1
data_input$A   <- data_input$treat
small_aps <- get.cand.adj(all.cand = all_cand, cand.Qform.fancy = NULL, cand.gform.fancy = NULL)
rm(list=ls())
source("Stage2_Functions_Meta.R")
source("TMLE_Functions_Meta.R")
source("Adapt_Functions_Meta.R")
library("SuperLearner")
library("glmnet")
library("earth")
library('knitr')
library("speff2trial")
# help(ACTG175)
data_input <- ACTG175
# subset the data  aged 18+
data_input <- data_input[data_input$age >17,]
# create indicators
data_input$young <- as.numeric( data_input$age < 30)
data_input$cd40bin <- as.numeric(data_input$cd40 > 350)
data_input$cd80bin <- as.numeric(data_input$cd80 > 350)
data_input$recent <- as.numeric(data_input$strat==2)
data_input$id  <- data_input$pidnum # patient id
data_input$U   <- 1
data_input$alpha <- 1
data_input$A   <- data_input$treat
all_cand <- c("age", "young", "wtkg", "hemo",
"karnof", "oprior", "preanti",
"race",  "gender",
"str2", "recent",  "symptom",
"cd40", "cd40bin", "cd80", "cd80bin")
small_aps <- get.cand.adj(all.cand = all_cand, cand.Qform.fancy = NULL, cand.gform.fancy = NULL)
large_aps  <- get.cand.adj(all.cand = all_cand,
cand.Qform.fancy = c("glm", "stepwise", "lasso", "mars", "mars.corP"),
cand.gform.fancy = c("glm", "stepwise", "lasso", "mars", "mars.corP"))
# large_aps
set.seed(1)
nReps <- 2
sim.cols <- c('est', 'bias', 'cover','reject')
UNADJ <-  data.frame(matrix(NA, nrow=nReps, ncol=length(sim.cols)))
colnames(UNADJ) <- sim.cols
SMALL <- BIG <- UNADJ
data_input$Y   <- data_input$cd420
goal <- 'RD'
dt <- data_input
for(r in 1:nReps){
# randomly permute the treatment
dt$A <- sample(dt$A)
# implement 3 estimators
unadj <- suppressWarnings( Stage2(goal = goal, data.input = dt, do.data.adapt =F, psi=0))
small_tmle <- suppressWarnings( Stage2(goal = goal, data.input = dt,
do.data.adapt = TRUE, V = 5,
cand.QAdj =  small_aps$cand.QAdj, cand.Qform = small_aps$cand.Qform,
cand.gAdj =  small_aps$cand.gAdj, cand.gform = small_aps$cand.gform,
psi=0) )
large_tmle <- suppressWarnings( Stage2(goal = goal, data.input = dt,
do.data.adapt = TRUE, V = 5,
cand.QAdj =  large_aps$cand.QAdj, cand.Qform = large_aps$cand.Qform,
cand.gAdj =  large_aps$cand.gAdj, cand.gform = large_aps$cand.gform,
psi=0) )
# save the output
UNADJ[r,] <- unadj[,sim.cols]
SMALL[r,] <- small_tmle[,sim.cols]
BIG[r, ]  <- large_tmle[,sim.cols]
print(r)
}
save(UNADJ, SMALL, BIG, file='ACTG_null.Rdata')
colMeans(UNADJ, na.rm=T)
colMeans(SMALL, na.rm=T)
colMeans(BIG, na.rm=T)
UNADJ
load('ACTG_null.Rdata')
colMeans(UNADJ, na.rm=T)
colMeans(SMALL, na.rm=T)
colMeans(BIG, na.rm=T)
UNADJ
load('ACTG_null.Rdata')
round(colMeans(UNADJ, na.rm=T), 3)
round(colMeans(SMALL, na.rm=T), 3)
round(colMeans(BIG, na.rm=T), 3)
