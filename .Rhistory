, do.data.adapt = TRUE
, do.cv.variance = FALSE
, V = 5
, one.sided = FALSE
, cand.QAdj =  ap_simple$cand.QAdj
, cand.Qform = ap_simple$cand.Qform
, cand.gAdj =  ap_simple$cand.gAdj
, cand.gform = ap_simple$cand.gform
, verbose = FALSE)
fancy <- Stage2(goal = goal,
data.input  = data_input
, do.data.adapt = TRUE
, do.cv.variance = FALSE
, V = 5
, one.sided = FALSE
, cand.QAdj =  ap_fancy$cand.QAdj
, cand.Qform = ap_fancy$cand.Qform
, cand.gAdj =  ap_fancy$cand.gAdj
, cand.gform = ap_fancy$cand.gform
, verbose = FALSE)
these.cols <- c("est", "se", "CI.lo", "CI.hi")
these <- c( paste("Txt", these.cols, sep='.'), paste("Con", these.cols, sep='.'),
these.cols, "pval")
if(do.binary) {
digs <- 1
scale <- 100
} else{
digs <- 1
scale <- 1
}
round(unadj[,these]*scale, digs)
round(simple[,these]*scale, digs)
round(fancy[,these]*scale, digs)
(unadj$se^2)/(simple$se^2)
(unadj$se^2)/(fancy$se^2)
fancy
rm(list=ls())
source("Stage2_Functions_Meta.R")
source("TMLE_Functions_Meta.R")
source("Adapt_Functions_Meta.R")
library("SuperLearner")
library("glmnet")
library("earth")
# to demonstrate
library("speff2trial")
# help(ACTG175)
#' https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2562926/pdf/nihms46485.pdf
#' https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2600547/pdf/nihms-45052.pdf
#' https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2574960/pdf/nihms-45063.pdf
do.binary <- T
data_input     <- ACTG175
data_input$id  <- ACTG175$pidnum
data_input$U   <- data_input$alpha <- 1
data_input$A   <- ACTG175$treat
# for discretizing outcome
cutoff <- 350
if(do.binary){
goal <- 'aRR'
data_input$Y <- as.numeric(ACTG175$cd420 > cutoff)
}else{
goal <- 'RD'
data_input$Y   <- ACTG175$cd420
}
# subset the data to men aged 18+
#data_input <- data_input[data_input$gender==1,]
data_input <- data_input[data_input$age >17,]
data_input$young <- as.numeric( data_input$age < 30)
data_input$cd40bin <- as.numeric(data_input$cd40 > cutoff)
data_input$cd80bin <- as.numeric(data_input$cd80 > cutoff)
data_input$recent <- as.numeric(data_input$strat==2)
###Adaptive Selection of the Optimal Strategy
set.seed(1)
all_cand <-
c("age", "young", "wtkg", "hemo", "homo", "drugs",
"karnof", "oprior", "preanti",
"race",  "gender",
"str2", "recent",  "symptom",
"cd40", "cd40bin",       "cd80", "cd80bin"
)
#' Estimator 1: Simple Adaptive Prespecification
#' This estimator will automatically consider
#' GLMs with a main term for one element of all.cand (and nothing=U)
ap_simple <- get.cand.adj(all.cand = all_cand
, cand.Qform.fancy = NULL, cand.gform.fancy = NULL)
#' Estimator 2: Fancy Adaptive Prespecification
#' For this estimator, we need to specify candidate algorithms
#' for adjusting for multiple covariates
cand_gform_fancy <-
cand_qform_fancy <-
c("glm", "stepwise", #"step.interaction",
"lasso", "mars", "mars.corP")
ap_fancy  <- get.cand.adj(all.cand = all_cand,
cand.Qform.fancy = cand_qform_fancy,
cand.gform.fancy = cand_gform_fancy)
unadj <- Stage2(goal = goal, data.input = data_input,
do.data.adapt = FALSE, do.cv.variance = FALSE,
one.sided = FALSE, verbose = FALSE)
simple <- Stage2(goal = goal,
data.input = data_input
, do.data.adapt = TRUE
, do.cv.variance = FALSE
, V = 5
, one.sided = FALSE
, cand.QAdj =  ap_simple$cand.QAdj
, cand.Qform = ap_simple$cand.Qform
, cand.gAdj =  ap_simple$cand.gAdj
, cand.gform = ap_simple$cand.gform
, verbose = FALSE)
fancy <- Stage2(goal = goal,
data.input  = data_input
, do.data.adapt = TRUE
, do.cv.variance = FALSE
, V = 5
, one.sided = FALSE
, cand.QAdj =  ap_fancy$cand.QAdj
, cand.Qform = ap_fancy$cand.Qform
, cand.gAdj =  ap_fancy$cand.gAdj
, cand.gform = ap_fancy$cand.gform
, verbose = FALSE)
these.cols <- c("est", "se", "CI.lo", "CI.hi")
these <- c( paste("Txt", these.cols, sep='.'), paste("Con", these.cols, sep='.'),
these.cols, "pval")
if(do.binary) {
digs <- 1
scale <- 100
} else{
digs <- 1
scale <- 1
}
round(unadj[,these]*scale, digs)
round(simple[,these]*scale, digs)
round(fancy[,these]*scale, digs)
(unadj$se^2)/(simple$se^2)
(unadj$se^2)/(fancy$se^2)
fancy
rm(list=ls())
source("Stage2_Functions_Meta.R")
source("TMLE_Functions_Meta.R")
source("Adapt_Functions_Meta.R")
library("SuperLearner")
library("glmnet")
library("earth")
# to demonstrate
library("speff2trial")
# help(ACTG175)
#' https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2562926/pdf/nihms46485.pdf
#' https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2600547/pdf/nihms-45052.pdf
#' https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2574960/pdf/nihms-45063.pdf
do.binary <- F
data_input     <- ACTG175
data_input$id  <- ACTG175$pidnum
data_input$U   <- data_input$alpha <- 1
data_input$A   <- ACTG175$treat
# for discretizing outcome
cutoff <- 350
if(do.binary){
goal <- 'aRR'
data_input$Y <- as.numeric(ACTG175$cd420 > cutoff)
}else{
goal <- 'RD'
data_input$Y   <- ACTG175$cd420
}
# subset the data to men aged 18+
#data_input <- data_input[data_input$gender==1,]
data_input <- data_input[data_input$age >17,]
data_input$young <- as.numeric( data_input$age < 30)
data_input$cd40bin <- as.numeric(data_input$cd40 > cutoff)
data_input$cd80bin <- as.numeric(data_input$cd80 > cutoff)
data_input$recent <- as.numeric(data_input$strat==2)
###Adaptive Selection of the Optimal Strategy
set.seed(1)
all_cand <-
c("age", "young", "wtkg", "hemo", "homo", "drugs",
"karnof", "oprior", "preanti",
"race",  "gender",
"str2", "recent",  "symptom",
"cd40", "cd40bin",       "cd80", "cd80bin"
)
#' Estimator 1: Simple Adaptive Prespecification
#' This estimator will automatically consider
#' GLMs with a main term for one element of all.cand (and nothing=U)
ap_simple <- get.cand.adj(all.cand = all_cand
, cand.Qform.fancy = NULL, cand.gform.fancy = NULL)
#' Estimator 2: Fancy Adaptive Prespecification
#' For this estimator, we need to specify candidate algorithms
#' for adjusting for multiple covariates
cand_gform_fancy <-
cand_qform_fancy <-
c("glm", "stepwise", #"step.interaction",
"lasso", "mars", "mars.corP")
ap_fancy  <- get.cand.adj(all.cand = all_cand,
cand.Qform.fancy = cand_qform_fancy,
cand.gform.fancy = cand_gform_fancy)
unadj <- Stage2(goal = goal, data.input = data_input,
do.data.adapt = FALSE, do.cv.variance = FALSE,
one.sided = FALSE, verbose = FALSE)
simple <- Stage2(goal = goal,
data.input = data_input
, do.data.adapt = TRUE
, do.cv.variance = FALSE
, V = 5
, one.sided = FALSE
, cand.QAdj =  ap_simple$cand.QAdj
, cand.Qform = ap_simple$cand.Qform
, cand.gAdj =  ap_simple$cand.gAdj
, cand.gform = ap_simple$cand.gform
, verbose = FALSE)
fancy <- Stage2(goal = goal,
data.input  = data_input
, do.data.adapt = TRUE
, do.cv.variance = FALSE
, V = 5
, one.sided = FALSE
, cand.QAdj =  ap_fancy$cand.QAdj
, cand.Qform = ap_fancy$cand.Qform
, cand.gAdj =  ap_fancy$cand.gAdj
, cand.gform = ap_fancy$cand.gform
, verbose = FALSE)
these.cols <- c("est", "se", "CI.lo", "CI.hi")
these <- c( paste("Txt", these.cols, sep='.'), paste("Con", these.cols, sep='.'),
these.cols, "pval")
if(do.binary) {
digs <- 1
scale <- 100
} else{
digs <- 1
scale <- 1
}
round(unadj[,these]*scale, digs)
round(simple[,these]*scale, digs)
round(fancy[,these]*scale, digs)
(unadj$se^2)/(simple$se^2)
(unadj$se^2)/(fancy$se^2)
fancy
rm(list=ls())
source("Stage2_Functions_Meta.R")
source("TMLE_Functions_Meta.R")
source("Adapt_Functions_Meta.R")
library("SuperLearner")
library("glmnet")
library("earth")
# to demonstrate
library("speff2trial")
# help(ACTG175)
#' https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2562926/pdf/nihms46485.pdf
#' https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2600547/pdf/nihms-45052.pdf
#' https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2574960/pdf/nihms-45063.pdf
do.binary <- F
data_input     <- ACTG175
data_input$id  <- ACTG175$pidnum
data_input$U   <- data_input$alpha <- 1
data_input$A   <- ACTG175$treat
# for discretizing outcome
cutoff <- 350
if(do.binary){
goal <- 'aRR'
data_input$Y <- as.numeric(ACTG175$cd420 > cutoff)
}else{
goal <- 'RD'
data_input$Y   <- ACTG175$cd420
}
# subset the data to men aged 18+
#data_input <- data_input[data_input$gender==1,]
data_input <- data_input[data_input$age >17,]
data_input$young <- as.numeric( data_input$age < 30)
data_input$cd40bin <- as.numeric(data_input$cd40 > cutoff)
data_input$cd80bin <- as.numeric(data_input$cd80 > cutoff)
data_input$recent <- as.numeric(data_input$strat==2)
###Adaptive Selection of the Optimal Strategy
set.seed(1)
all_cand <-
c("age", "young", "wtkg", #"hemo",
"karnof", "oprior", "preanti",
"race",  "gender",
"str2", "recent",  "symptom",
"cd40", "cd40bin",       "cd80", "cd80bin"
)
#' Estimator 1: Simple Adaptive Prespecification
#' This estimator will automatically consider
#' GLMs with a main term for one element of all.cand (and nothing=U)
ap_simple <- get.cand.adj(all.cand = all_cand
, cand.Qform.fancy = NULL, cand.gform.fancy = NULL)
#' Estimator 2: Fancy Adaptive Prespecification
#' For this estimator, we need to specify candidate algorithms
#' for adjusting for multiple covariates
cand_gform_fancy <-
cand_qform_fancy <-
c("glm", "stepwise", #"step.interaction",
"lasso", "mars", "mars.corP")
ap_fancy  <- get.cand.adj(all.cand = all_cand,
cand.Qform.fancy = cand_qform_fancy,
cand.gform.fancy = cand_gform_fancy)
unadj <- Stage2(goal = goal, data.input = data_input,
do.data.adapt = FALSE, do.cv.variance = FALSE,
one.sided = FALSE, verbose = FALSE)
simple <- Stage2(goal = goal,
data.input = data_input
, do.data.adapt = TRUE
, do.cv.variance = FALSE
, V = 5
, one.sided = FALSE
, cand.QAdj =  ap_simple$cand.QAdj
, cand.Qform = ap_simple$cand.Qform
, cand.gAdj =  ap_simple$cand.gAdj
, cand.gform = ap_simple$cand.gform
, verbose = FALSE)
fancy <- Stage2(goal = goal,
data.input  = data_input
, do.data.adapt = TRUE
, do.cv.variance = FALSE
, V = 5
, one.sided = FALSE
, cand.QAdj =  ap_fancy$cand.QAdj
, cand.Qform = ap_fancy$cand.Qform
, cand.gAdj =  ap_fancy$cand.gAdj
, cand.gform = ap_fancy$cand.gform
, verbose = FALSE)
these.cols <- c("est", "se", "CI.lo", "CI.hi")
these <- c( paste("Txt", these.cols, sep='.'), paste("Con", these.cols, sep='.'),
these.cols, "pval")
if(do.binary) {
digs <- 1
scale <- 100
} else{
digs <- 1
scale <- 1
}
round(unadj[,these]*scale, digs)
round(simple[,these]*scale, digs)
round(fancy[,these]*scale, digs)
(unadj$se^2)/(simple$se^2)
(unadj$se^2)/(fancy$se^2)
fancy
rm(list=ls())
source("Stage2_Functions_Meta.R")
source("TMLE_Functions_Meta.R")
source("Adapt_Functions_Meta.R")
library("SuperLearner")
library("glmnet")
library("earth")
# to demonstrate
library("speff2trial")
# help(ACTG175)
#' https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2562926/pdf/nihms46485.pdf
#' https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2600547/pdf/nihms-45052.pdf
#' https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2574960/pdf/nihms-45063.pdf
do.binary <- F
data_input     <- ACTG175
data_input$id  <- ACTG175$pidnum
data_input$U   <- data_input$alpha <- 1
data_input$A   <- ACTG175$treat
# for discretizing outcome
cutoff <- 350
if(do.binary){
goal <- 'aRR'
data_input$Y <- as.numeric(ACTG175$cd420 > cutoff)
}else{
goal <- 'RD'
data_input$Y   <- ACTG175$cd420
}
# subset the data to men aged 18+
#data_input <- data_input[data_input$gender==1,]
data_input <- data_input[data_input$age >17,]
data_input$young <- as.numeric( data_input$age < 30)
data_input$cd40bin <- as.numeric(data_input$cd40 > cutoff)
data_input$cd80bin <- as.numeric(data_input$cd80 > cutoff)
data_input$recent <- as.numeric(data_input$strat==2)
###Adaptive Selection of the Optimal Strategy
set.seed(1)
all_cand <-
c("age", "young", "wtkg", "hemo",
"karnof", "oprior", "preanti",
"race",  "gender",
"str2", "recent",  "symptom",
"cd40", "cd40bin",       "cd80", "cd80bin"
)
#' Estimator 1: Simple Adaptive Prespecification
#' This estimator will automatically consider
#' GLMs with a main term for one element of all.cand (and nothing=U)
ap_simple <- get.cand.adj(all.cand = all_cand
, cand.Qform.fancy = NULL, cand.gform.fancy = NULL)
#' Estimator 2: Fancy Adaptive Prespecification
#' For this estimator, we need to specify candidate algorithms
#' for adjusting for multiple covariates
cand_gform_fancy <-
cand_qform_fancy <-
c("glm", "stepwise", #"step.interaction",
"lasso", "mars", "mars.corP")
ap_fancy  <- get.cand.adj(all.cand = all_cand,
cand.Qform.fancy = cand_qform_fancy,
cand.gform.fancy = cand_gform_fancy)
unadj <- Stage2(goal = goal, data.input = data_input,
do.data.adapt = FALSE, do.cv.variance = FALSE,
one.sided = FALSE, verbose = FALSE)
simple <- Stage2(goal = goal,
data.input = data_input
, do.data.adapt = TRUE
, do.cv.variance = FALSE
, V = 5
, one.sided = FALSE
, cand.QAdj =  ap_simple$cand.QAdj
, cand.Qform = ap_simple$cand.Qform
, cand.gAdj =  ap_simple$cand.gAdj
, cand.gform = ap_simple$cand.gform
, verbose = FALSE)
fancy <- Stage2(goal = goal,
data.input  = data_input
, do.data.adapt = TRUE
, do.cv.variance = FALSE
, V = 5
, one.sided = FALSE
, cand.QAdj =  ap_fancy$cand.QAdj
, cand.Qform = ap_fancy$cand.Qform
, cand.gAdj =  ap_fancy$cand.gAdj
, cand.gform = ap_fancy$cand.gform
, verbose = FALSE)
these.cols <- c("est", "se", "CI.lo", "CI.hi")
these <- c( paste("Txt", these.cols, sep='.'), paste("Con", these.cols, sep='.'),
these.cols, "pval")
if(do.binary) {
digs <- 1
scale <- 100
} else{
digs <- 1
scale <- 1
}
round(unadj[,these]*scale, digs)
round(simple[,these]*scale, digs)
round(fancy[,these]*scale, digs)
(unadj$se^2)/(simple$se^2)
(unadj$se^2)/(fancy$se^2)
fancy
source("~/Dropbox/Research/ClusteredTMLEs/BigRCTs/AdaptivePrespec/Adapt_Functions_Meta.R")
help(ACTG175)
library("speff2trial")
help(ACTG175)
table(ACTG175$treat)
?speff2trial
citation(speff2trial)
citation('speff2trial')
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# help(ACTG175)
head(ACTG175)
# Small APS - working GLMs with at most 1 adjustment variable
small_aps <- get.cand.adj(all.cand = all_cand, cand.Qform.fancy = NULL, cand.gform.fancy = NULL)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("speff2trial")
# help(ACTG175)
data_input <- ACTG175
# subset the data to men aged 18+
data_input <- data_input[data_input$age >17,]
# create indicators
data_input$young <- as.numeric( data_input$age < 30)
data_input$cd40bin <- as.numeric(data_input$cd40 > 350)
data_input$cd80bin <- as.numeric(data_input$cd80 > 350)
data_input$recent <- as.numeric(data_input$strat==2)
# https://github.com/LauraBalzer/AdaptivePrespec/
source("Stage2_Functions_Meta.R")
source("TMLE_Functions_Meta.R")
source("Adapt_Functions_Meta.R")
library("SuperLearner")
library("glmnet")
library("earth")
data_input$id  <- ACTG175$pidnum
# Small APS - working GLMs with at most 1 adjustment variable
small_aps <- get.cand.adj(all.cand = all_cand, cand.Qform.fancy = NULL, cand.gform.fancy = NULL)
rm(list=ls())
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("speff2trial")
# help(ACTG175)
data_input <- ACTG175
# subset the data to men aged 18+
data_input <- data_input[data_input$age >17,]
# create indicators
data_input$young <- as.numeric( data_input$age < 30)
data_input$cd40bin <- as.numeric(data_input$cd40 > 350)
data_input$cd80bin <- as.numeric(data_input$cd80 > 350)
data_input$recent <- as.numeric(data_input$strat==2)
# https://github.com/LauraBalzer/AdaptivePrespec/
source("Stage2_Functions_Meta.R")
source("TMLE_Functions_Meta.R")
source("Adapt_Functions_Meta.R")
library("SuperLearner")
library("glmnet")
library("earth")
data_input$id  <- ACTG175$pidnum
data_input$id  <- data_input$pidnum
data_input$U   <- 1
data_input$alpha <- 1
data_input$A   <- data_input$treat
all_cand <- c("age", "young", "wtkg", "hemo",
"karnof", "oprior", "preanti",
"race",  "gender",
"str2", "recent",  "symptom",
"cd40", "cd40bin", "cd80", "cd80bin")
# Small APS - working GLMs with at most 1 adjustment variable
small_aps <- get.cand.adj(all.cand = all_cand, cand.Qform.fancy = NULL, cand.gform.fancy = NULL)
small_aps
# Large APS - considering the candidates in Small APS as well as main terms, stepwise, LASSO, and MARS with and without screening
ap_fancy  <- get.cand.adj(all.cand = all_cand,
cand.Qform.fancy = c("glm", "stepwise", "lasso", "mars", "mars.corP"),
cand.gform.fancy = c("glm", "stepwise", "lasso", "mars", "mars.corP"))
ap_fancy
